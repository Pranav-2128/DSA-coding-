import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node
{
    int data; 
    int hd; 
    Node left, right; 
    public Node(int key)
    {
        data = key;
        hd = Integer.MAX_VALUE;
        left = right = null;
    }
}

class GfG 
{
    static Node buildTree(String str)
    {
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) 
            {        
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;
        printInorder(root.left);
        System.out.print(root.data+" ");
        printInorder(root.right);
    }
    
	public static void main (String[] args) throws IOException
	{
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    int t=Integer.parseInt(br.readLine());
	    while(t-- > 0)
	    {
            String s = br.readLine();
	    	Node root = buildTree(s);
	        Solution ob = new Solution();
		    ArrayList <Integer> res = ob.bottomView(root);
		    for (Integer num : res) System.out.print (num + " ");
	     	System.out.println();
	    }
	}
}

class Solution 
{
    class Pair 
    {
        int y; 
        int data;

        Pair(int y, int data) 
        {
            this.y = y;
            this.data = data;
        }
    }

    public void solve(Node root, int x, int y, TreeMap<Integer, Pair> mp) 
    {
        if (root == null) 
        {
            return;
        }

        if (!mp.containsKey(x) || mp.get(x).y <= y) 
        {
            mp.put(x, new Pair(y, root.data));
        }

        solve(root.left, x - 1, y + 1, mp);
        solve(root.right, x + 1, y + 1, mp);
    }

    public ArrayList<Integer> bottomView(Node root) 
    {
        TreeMap<Integer, Pair> mp = new TreeMap<>();
        ArrayList<Integer> ans = new ArrayList<>();

        solve(root, 0, 0, mp);
        for (Map.Entry<Integer, Pair> entry : mp.entrySet()) 
        {
            ans.add(entry.getValue().data);
        }
        return ans;
    }
}
