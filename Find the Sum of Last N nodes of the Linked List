import java.io.*;
import java.util.*;

class Node 
{
    int data;
    Node next;

    Node(int a) 
    {
        data = a;
        next = null;
    }
}

class Solution 
{
    public int sumOfLastN_Nodes(Node head, int n) 
    {
        Node prev = null;
        Node curr = head;
        Node next = curr;
        
        while(curr != null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        int sum = 0;
        while(n > 0)
        {
            sum+=prev.data;
            prev = prev.next;
            n--;
        }
        return sum;
    }
}

class LinkedList 
{
    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) 
        {
            ArrayList<Integer> arr = new ArrayList<>();
            String input = br.readLine();
            StringTokenizer st = new StringTokenizer(input);
            while (st.hasMoreTokens()) 
            {
                arr.add(Integer.parseInt(st.nextToken()));
            }
            int n = Integer.parseInt(br.readLine());
            Node head = new Node(arr.get(0));
            Node tail = head;
            for (int i = 1; i < arr.size(); ++i) 
            {
                tail.next = new Node(arr.get(i));
                tail = tail.next;
            }
            Solution ob = new Solution();
            System.out.println(ob.sumOfLastN_Nodes(head, n));
        }
    }
}
