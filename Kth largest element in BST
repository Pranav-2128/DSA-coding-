import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG 
{
    
    static Node buildTree(String str)
    {
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        
        Node root = new Node(Integer.parseInt(ip[0]));

        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);

        int i = 1;
        while(queue.size() > 0 && i < ip.length) 
        {
            
            Node currNode = queue.peek();
            queue.remove();
                
            String currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                    
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
  
	public static void main (String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int t=Integer.parseInt(br.readLine());
        
        while(t > 0)
        {
            String s = br.readLine();
            Node root = buildTree(s);
            
            int k = Integer.parseInt(br.readLine());
            
            Solution g = new Solution();
            System.out.println (g.kthLargest(root,k));
            t--;
        }
    }
}

class Solution
{
    int count = 0;
    int ans = 0;
    
    public int kthLargest(Node root,int K)
    {
        reverseinorder(root,K);
        return ans;
    }
    
    public void reverseinorder(Node root,int K)
    {
        if(root == null)
        {
            return;
        }
        
        reverseinorder(root.right,K);
        count++;
        
        if(count == K)
        {
            ans = root.data;
            return ;
        }
        
        reverseinorder(root.left,K);
    }
}
