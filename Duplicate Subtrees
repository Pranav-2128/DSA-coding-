import java.io.*;
import java.lang.*;
import java.util.*;

class Node 
{
    int data;
    Node left, right;

    public Node(int data) 
    { 
        this.data = data;
    }
}

class GFG 
{
    static Node buildTree(String str) 
    {
        if (str.length() == 0 || str.charAt(0) == 'N') 
        {
            return null;
        }

        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();

        queue.add(root);
        int i = 1;
        while (queue.size() > 0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if (!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;
            if (i >= ip.length) break;

            currVal = ip[i];

            if (!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static void preorder(Node root, List<Integer> temp) 
    {
        if (root == null) return;
        temp.add(root.data);
        preorder(root.left, temp);
        preorder(root.right, temp);
    }

    public static void main(String[] args) throws IOException 
    {
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.next());
        sc.nextLine();
        while (t-- > 0) 
        {
            String s = sc.nextLine();
            Node root = buildTree(s);
            Solution obj = new Solution();
            List<Node> res = obj.printAllDups(root);

            List<List<Integer>> ans = new ArrayList<>();

            for (int i = 0; i < res.size(); i++) 
            {
                List<Integer> temp = new ArrayList<>();
                preorder(res.get(i), temp);
                ans.add(temp);
            }
            Collections.sort(ans,
                             (x, y)
                                 -> x.get(0) == y.get(0) ? x.size() - y.size()
                                                         : x.get(0) - y.get(0));

            for (int i = 0; i < ans.size(); i++) 
            {
                for (int j = 0; j < ans.get(i).size(); j++) 
                {
                    System.out.print(ans.get(i).get(j) + " ");
                }
                System.out.println();
            }
        }
    }
}

class Solution 
{
    public List<Node> printAllDups(Node root) 
    {
        List<Node> result = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        serializeAndFind(root, map, result);
        return result;
    }

    private String serializeAndFind(Node node, Map<String, Integer> map, List<Node> result) 
    {
        if (node == null) 
        {
            return "#";
        }
        String serialized = node.data + "," + serializeAndFind(node.left, map, result) + "," + serializeAndFind(node.right, map, result);
        map.put(serialized, map.getOrDefault(serialized, 0) + 1);
        
        if (map.get(serialized) == 2) 
        {
            result.add(node);
        }
        return serialized;
    }
}
