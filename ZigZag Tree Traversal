import java.util.*;
import java.util.HashMap;
import java.io.*;

class Node
{
    int data;
    Node left,right;
    Node(int data)
    {
        this.data = data;
        left=null;
        right=null;
    }
}
	
public class GFG2
{
    static Node buildTree(String str){
        
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
                
            String currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    
	public static void inorder(Node root)
	{
	    if(root == null)
	    return;
	    inorder(root.left);
	    System.out.print(root.data);
	    inorder(root.right);
	}
    public static void main(String args[]) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    int t=Integer.parseInt(br.readLine());
        while(t > 0)
        {
            String s = br.readLine();
	    	Node root = buildTree(s);
    	    GFG g = new GFG();
		
		    ArrayList<Integer> res = g.zigZagTraversal(root) ;
		    for (int i = 0; i < res.size (); i++)
		    {
		        System.out.print (res.get (i) + " ");
		    }
		    System. out. println();  
            t--;
        }
	}
}

class GFG
{
    ArrayList<Integer> zigZagTraversal(Node root)
    {
        ArrayList<Integer>arr = new ArrayList<>() ;
        
        Queue<Node>q = new LinkedList<>() ;
        
        q.add(root) ;
        int cnt = 1 ;
        
        while( q.size() != 0)
        {
            int n = q.size() ;
            ArrayList<Integer>temp = new ArrayList<>() ;
            for( int i = 0 ; i < n ; i++ )
            {
                Node r = q.remove() ;
                
                temp.add(r.data) ;
                
                if(r.left != null )
                {
                    q.add(r.left) ;
                }
                
                if(r.right != null )
                {
                    q.add(r.right) ;
                }
                
            }
            
            int m = temp.size() ;
            
            if( cnt%2 == 0 )
            {
                Collections.reverse(temp) ;
              for( int i : temp )
            {
                arr.add(i) ;
            }
            
            }
            else{
                 for( int i : temp )
            {
                arr.add(i) ;
            }
            }
            cnt++ ;
        }
        
        return arr ;
    }
}
