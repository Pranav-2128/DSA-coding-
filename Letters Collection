import java.io.*;
import java.util.*;

class GFG
{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0)
        {
            String arr[] = in.readLine().trim().split("\\s+");
            int n = Integer.parseInt(arr[0]);
            int m = Integer.parseInt(arr[1]);
            int mat[][] = new int[n][m];
            for(int i = 0; i < n; i++)
            {
                String a[] = in.readLine().trim().split("\\s+");
                for(int j = 0; j < m; j++)
                {
                    mat[i][j] = Integer.parseInt(a[j]);
                }
            }
            int q = Integer.parseInt(in.readLine());
            int queries[][] = new int[q][3];
            for(int i = 0;i < q;i++)
            {
                String a1[] = in.readLine().trim().split("\\s+");
                for(int j = 0;j < 3;j++)
                {
                    queries[i][j] = Integer.parseInt(a1[j]);
                }
            }
            Solution ob = new Solution();
            List<Integer> ans = new ArrayList<Integer>();
            ans = ob.matrixSum(n, m, mat, q, queries);
            for(int i = 0; i < q; i++)
            {
                System.out.println(ans.get(i));
            }
        }
    }
}
class Solution
{
    static List<Integer> matrixSum(int n, int m, int mat[][], int q, int queries[][])
    {
        List<Integer> ans = new ArrayList<>();
        
        int[] dx1 = {-1, -1, 0, +1, +1, +1, 0, -1};
        int[] dy1 = {0, +1, +1, +1, 0, -1, -1, -1};
        
        int[] dx2 = {-2, -2, -2, -2, -2, -1, 0, +1, +2, +2, +2, +2, +2, +1, 0, -1};
        int[] dy2 = {-2, -1, 0, +1, +2, +2, +2, +2, +2, +1, 0, -1, -2, -2, -2, -2};
        
        
        for(int i = 0; i < q; i++) 
        {
            int x = queries[i][1];
            int y = queries[i][2];
            int sum = 0;
            
            if(queries[i][0] == 1) 
            {
                for(int idx = 0; idx < 8; idx++) 
                {
                    int x_index = x + dx1[idx];
                    int y_index = y + dy1[idx]; 
                    
                    if(x_index >= 0 && x_index < n && y_index >= 0 && y_index < m) 
                    {
                        sum += mat[x_index][y_index];
                    }
                }
                ans.add(sum);
            } 
            else 
            {
                for(int idx = 0; idx < 16; idx++) 
                {
                    int x_index = x + dx2[idx];
                    int y_index = y + dy2[idx]; 
                    if(x_index >= 0 && x_index < n && y_index >= 0 && y_index < m) 
                    {
                        sum += mat[x_index][y_index];
                    }
                }
                ans.add(sum);
            }
        }
        return ans;
    }
}
