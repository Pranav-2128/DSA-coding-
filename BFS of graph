import java.util.*;
import java.lang.*;
import java.io.*;
class GFG 
{
    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) 
        {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            for (int i = 0; i < V; i++) adj.add(i, new ArrayList<Integer>());
            for (int i = 0; i < E; i++) 
            {
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
            }
            Solution obj = new Solution();
            ArrayList<Integer> ans = obj.bfsOfGraph(V, adj);
            for (int i = 0; i < ans.size(); i++)
                System.out.print(ans.get(i) + " ");
            System.out.println();
        }
    }
}
class Solution 
{
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        ArrayList<Integer> res=new ArrayList<Integer>();
        boolean visited[]=new boolean[V];
        Queue<Integer> q=new LinkedList<>();
        q.add(0);
        res.add(0);
        while(! q.isEmpty())
        {
            int len=q.size();
            
            for(int i=0;i<len;i++)
            {
                int tem=q.poll();
                
                for(int x:adj.get(tem))
                {
                    if(! visited[x])
                    {
                        res.add(x);
                        visited[x]=true;   
                        q.offer(x);
                    }
                }
            }
        }
        return res;
    }
}
