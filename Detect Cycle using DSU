import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int V = Integer.parseInt(s[0]);
            int E = Integer.parseInt(s[1]);
            ArrayList<ArrayList<Integer>>adj = new ArrayList<>();
            for(int i = 0; i < V; i++)
                adj.add(i, new ArrayList<Integer>());
            for(int i = 0; i < E; i++){
                String[] S = br.readLine().trim().split(" ");
                int u = Integer.parseInt(S[0]);
                int v = Integer.parseInt(S[1]);
                adj.get(u).add(v);
                adj.get(v).add(u);
            }
            Solution obj = new Solution();
            int ans = obj.detectCycle(V, adj);
            System.out.println(ans);
        }
    }
}
class Solution
{
    int p[];
    public int detectCycle(int V, ArrayList<ArrayList<Integer>> adj)
    {
        p = new int[V];
        for(int i = 0; i < V; i++)
        {
            p[i]=i;
        }
        Set<String> s = new HashSet<>();
        for(int i = 0; i < adj.size(); i++)
        {
            for(int nb:adj.get(i))
            {
                int xp = find(i);
                int yp = find(nb);
                if(xp != yp)
                {
                    p[xp] = yp;
                    s.add("" + i + " " + nb);
                    s.add("" + nb + " "+ i);
                }
                else if(!s.contains(""+nb+" "+i))
                {
                    return 1;
                }
            }
        }
        return 0;
    }
    int find(int v)
    {
        if(p[v]==v)
        {
            return v;
        }
        return p[v] = find(p[v]);
    }
}
