import java.util.*;
import java.lang.*;
import java.io.*;

class GFG 
{
    public static void main(String[] args) throws IOException 
    {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int T = Integer.parseInt(in.readLine());
        while (T-- > 0) 
        {
            String s[] = in.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int a[][] = new int[n][m];
            for (int i = 0; i < n; i++) 
            {
                s = in.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) 
                {
                    a[i][j] = Integer.parseInt(s[j]);
                }
            }
            
            Solution ob = new Solution();
            out.println(ob.numberOfEnclaves(a));
        }
        out.close();
    }
}

class Solution 
{
    int numberOfEnclaves(int[][] grid) 
    {
        int r = grid.length;
        int c = grid[0].length;
        
        for(int i = 0; i < c; i++)
        {
            if(grid[0][i] == 1)
            {
                dfs(grid,0,i);
            }
            
            if(grid[r-1][i] == 1)
            {
                dfs(grid, r-1, i);
            }
        }
        
        for(int i = 0; i < r; i++)
        {
            if(grid[i][0] == 1)
            {
              dfs(grid, i, 0);
            }
            if(grid[i][c-1] == 1)
            {
                dfs(grid,i,c-1);
            }
        }
        
        int cnt = 0;
        for(int i = 1; i < r; i++)
        {
            for(int j = 0; j < c; j++)
            {
                if(grid[i][j] == 1)
                {
                    cnt++;
                }
            }
        }
        return cnt;
    }
    
    void dfs(int[][] grid, int i, int j)
    {
        int r = grid.length;
        int c = grid[0].length;
        grid[i][j] = -1;
        int[] dx = {0,0,-1,1};
        int[] dy = {-1,1,0,0};
        for(int d = 0; d < 4; d++) 
        {
            int x = i + dx[d];
            int y = j + dy[d];
            if(x >= 0 && x < r && y >= 0 && y < c && grid[x][y] == 1)
            {
                dfs(grid,x,y);
            }
        }
    }
}
