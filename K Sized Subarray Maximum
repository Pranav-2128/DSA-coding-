import java.io.*;
import java.lang.*;
import java.util.*;

public class Main 
{
    public static void main(String args[]) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while (t-- > 0) 
        {
            int k = Integer.parseInt(br.readLine());
            String line = br.readLine();
            String[] tokens = line.split(" ");
            ArrayList<Integer> array = new ArrayList<>();

            for (String token : tokens) 
            {
                array.add(Integer.parseInt(token));
            }

            int[] arr = new int[array.size()];
            int idx = 0;
            for (int i : array) arr[idx++] = i;
            ArrayList<Integer> res = new Solution().max_of_subarrays(k, arr);

            for (int i = 0; i < res.size(); i++) System.out.print(res.get(i) + " ");
            System.out.println();
        }
    }
}

class Solution 
{
    public ArrayList<Integer> max_of_subarrays(int k,int arr[] ) 
    {
        ArrayList<Integer> result = new ArrayList<>();
        if (arr == null || arr.length == 0 || k == 0) 
        {
            return result;
        }

        Deque<Integer> deque = new LinkedList<>();

        for (int i = 0; i < arr.length; i++) 
        {
            while (!deque.isEmpty() && deque.peekFirst() < i - k + 1) 
            {
                deque.pollFirst();
            }

            while (!deque.isEmpty() && arr[deque.peekLast()] <= arr[i]) 
            {
                deque.pollLast();
            }

            deque.offerLast(i);
            if (i >= k - 1) 
            {
                result.add(arr[deque.peekFirst()]);
            }
        }
        return result;
    }
}
