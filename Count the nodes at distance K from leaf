#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000

struct Node
{
    int data;
    Node* left;
    Node* right;
};

Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

Node* buildTree(string str)
{
    if(str.length() == 0 || str[0] == 'N')
    {
        return NULL;
    }
    vector<string> ip;

    istringstream iss(str);
    for(string str; iss >> str; )
    {
        ip.push_back(str);
    }
    Node* root = newNode(stoi(ip[0]));

    queue<Node*> queue;
    queue.push(root);

    int i = 1;
    while(!queue.empty() && i < ip.size()) 
    {
        Node* currNode = queue.front();
        queue.pop();

        string currVal = ip[i];

        if(currVal != "N") 
        {
            currNode->left = newNode(stoi(currVal));
            queue.push(currNode->left);
        }

        i++;
        if(i >= ip.size())
        {
            break;
        }
        currVal = ip[i];

        if(currVal != "N") {

            currNode->right = newNode(stoi(currVal));

            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}

class Solution
{
    public:
    int c=0;
    bool check(Node* root, int k, int x)
    {
        if(!root) return false;
        if(x == k)
        {
            if(!root->left&&!root->right) return true;
            return false;
        }
        return check(root->left,k,x+1)||check(root->right,k,x+1);
    }
    void solve(Node* root, int k)
    {
        if(!root) return;
        if(check(root,k,0)) c++;
        solve(root->left,k);
        solve(root->right,k);
        
    }
    int printKDistantfromLeaf(Node* root, int k)
    {
        solve(root, k);
        return c;
    }
};

int main() 
{
    int t;
    string tc;
    getline(cin, tc);
    t = stoi(tc);
    while(t--)
    {
        string s, ks;
        getline(cin, s);
        Node* root = buildTree(s);
        getline(cin, ks);
        int k = stoi(ks);
        Solution obj;
        cout<<obj.printKDistantfromLeaf(root, k)<<endl;
    }
    return 0;
}
