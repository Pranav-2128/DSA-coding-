import java.util.Scanner;

class Node 
{
    int data;
    Node next;

    Node(int x) 
    {
        data = x;
        next = null;
    }
}



public class Main 
{
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) 
        {
            int n = sc.nextInt();
            Node start = null;
            Node temp = null, r = null;

            if(n > 0) 
            {
                int arr = sc.nextInt();
                temp = new Node(arr);
                start = temp;
                r = start;
            }

            for (int i = 0; i < n - 1; i++) 
            {
                int arr = sc.nextInt();
                temp = new Node(arr);
                r.next = temp;
                r = r.next;
            }

            if (n > 0)
            {
                temp.next = start;
                r = temp; 
            }


            int x = sc.nextInt();
            Solution ob = new Solution();
            start = ob.sortedInsert(start, x);
            printList(start);
            r = start;
            while (r != start.next) 
            {
                temp = start;
                start = start.next;
                temp = null;
            }
            temp = null;
        }
    }

    static void printList(Node start) 
    {
        Node temp;

        if (start != null) 
        {
            temp = start;
            do 
            {
                System.out.print(temp.data + " ");
                temp = temp.next;
            } 
            while (temp != start);
            {
                System.out.println();
            }
        }
    }
}

class Solution 
{
    public Node sortedInsert(Node head, int data) 
    {
        Node nn = new Node(data);
        if(head == null)
        {
            head = nn;
            nn.next = head;
            return head;
        }
        Node curr = head;
        if(curr.data >= data)
        {
            nn.next = head;
            while(curr.next != head)
            {
                curr = curr.next;
            }
            curr.next = nn;
            head = nn;
            return head;
        }
        while(curr.next != head)
        {
            if(data <= curr.next.data)
            {
                nn.next = curr.next;
                curr.next = nn;
                return head;
            }
            curr = curr.next;
        }
        curr.next=nn;
        nn.next=head;
        return head;
    }
}
