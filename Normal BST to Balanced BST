import java.util.Scanner;
import java.util.*;
import java.lang.*;
import java.io.*;

class Node
{
    int data;
    Node right, left;
    Node(int item)
    {
        data = item;
        left = right = null;
    }
}

class BinarySearchTree
{
    static Node insert(Node node, int data)
    {
        if (node == null)
        {
            return (new Node(data));
        }
        else 
        {
            if (data <= node.data)
            {
                node.left = insert(node.left, data);
            } 
            else 
            {
                node.right = insert(node.right, data);
            }
            return node;
        }
    }
    
    int height(Node node) 
    {
    if (node==null) 
    {
        return 0;
    }
    else
    {
        int lDepth = height(node.left);
        int rDepth = height(node.right);
        if (lDepth > rDepth)
        {
           return(lDepth+1);
        }
        else 
        {
            return(rDepth+1);
        }
    }
} 
    static Node buildTree(String str)
    {
        if(str.length()==0 || str.charAt(0)=='N'){
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) {
            
            Node currNode = queue.peek();
            queue.remove();
                
            String currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    public static void main (String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t=Integer.parseInt(br.readLine());
        while(t > 0)
        {
            String s = br.readLine();
            Node root = buildTree(s);
            GfG gfg = new GfG();
            root =  gfg.buildBalancedTree(root);
            BinarySearchTree bst = new BinarySearchTree();
            System.out.println(bst.height(root));
            t--;
        }
    }
    
    void preOrder(Node node) 
    {
        if (node == null)
        {
            return;
        }
        System.out.print(node.data + " ");
        preOrder(node.left);
        preOrder(node.right);
    }
}

class GfG
{
    static ArrayList<Integer> list;
    GfG()
    {
        list = new ArrayList<>();
    }
    
    public Node buildBalancedTree(Node root) 
    {
        inorder(root);
        Node start = null;
        start = convertToBST(start,0,list.size()-1);
        return start;
    }
    
    public static Node convertToBST(Node start,int l,int u)
    {
        if(l > u)
        {
            return null;
        }
        
        int mid = (l + u) / 2;
        start = new Node(list.get(mid));
        start.left = convertToBST(start.left,l,mid-1);
        start.right = convertToBST(start.right,mid+1,u);
      
        return start;
    }
    
    public static void inorder(Node root)
    {
        if(root == null)
        {
            return ;
        }
        
        inorder(root.left);
        list.add(root.data);
        inorder(root.right);
    }
}
