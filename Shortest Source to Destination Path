import java.io.*;
import java.util.*;
class GFG
{
    public static void main(String args[]) throws IOException 
    {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) 
        {
            int N, M, x, y;
            String S[] = read.readLine().split(" ");
            N = Integer.parseInt(S[0]);
            M = Integer.parseInt(S[1]);
            int a[][] = new int[N][M];
            for (int i = 0; i < N; i++) 
            {
                String s[] = read.readLine().split(" ");
                for (int j = 0; j < M; j++) a[i][j] = Integer.parseInt(s[j]);
            }
            String s1[] = read.readLine().split(" ");
            x = Integer.parseInt(s1[0]);
            y = Integer.parseInt(s1[1]);
            Solution ob = new Solution();
            System.out.println(ob.shortestDistance(N, M, a, x, y));
        }
    }
}
class Solution 
{
    int shortestDistance(int N, int M, int A[][], int X, int Y) 
    {
        int count=0;
        Queue<Pair> queue = new LinkedList<Pair>();
        boolean[][] visited = new boolean[N][M];
        queue.add(new Pair(0,0));
        while(!queue.isEmpty()){
            int size = queue.size();
         
            while(size-->0)
            {
                Pair p = queue.poll();
             
                if(p.i==X && p.j==Y)
                    return count;

                visited[p.i][p.j]=true;
                if(check(N,M,A,visited,p.i+1,p.j))
                    queue.add(new Pair(p.i+1,p.j));
                
                if(check(N,M,A,visited,p.i,p.j+1))
                    queue.add(new Pair(p.i,p.j+1));
                    
                if(check(N,M,A,visited,p.i-1,p.j))
                    queue.add(new Pair(p.i-1,p.j));
                    
                if(check(N,M,A,visited,p.i,p.j-1))
                    queue.add(new Pair(p.i,p.j-1));
            }
                count++;
        }
        return -1;
    }
    boolean check(int N, int M, int[][] A,boolean[][] visited, int i, int j)
    {
        if(i<0 || j<0 || i>=N || j>=M || A[i][j]==0 || visited[i][j])
        {
            return false;
        }
        visited[i][j]=true;
        return true;
    }
};
class Pair
{
    int i;
    int j;
    Pair(int i, int j )
    {
        this.i = i;
        this.j = j;
    }
}
