import java.io.*;
import java.util.*;


class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }

    public static Node buildTree(String str)
    {
        if(str.length()==0 || str.charAt(0)=='N') return null;
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        int i = 1;
        while(queue.size()>0 && i < ip.length)
        {
            Node currNode = queue.peek();
            queue.remove();

            String currVal = ip[i];

            if(!currVal.equals("N"))
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;
            
            if(i >= ip.length) break;

            currVal = ip[i];

            if(!currVal.equals("N"))
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static Node inputTree(BufferedReader br) throws IOException
    {
        return buildTree(br.readLine().trim());
    }

    public static void inorder(Node root)
    {
        if (root == null) return;
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);
    }
}


class IntMatrix
{
    public static int[][] input(BufferedReader br, int n, int m) throws IOException
    {
        int[][] mat = new int[n][];
        for(int i = 0; i < n; i++)
        {
            String[] s = br.readLine().trim().split(" ");
            mat[i] = new int[s.length];
            for(int j = 0; j < s.length; j++)
                mat[i][j] = Integer.parseInt(s[j]);
        }

        return mat;
    }

    public static void print(int[][] m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }

    public static void print(ArrayList<ArrayList<Integer>> m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
}

class GFG 
{
    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0)
        {
            Node root = Node.inputTree(br);
            Solution obj = new Solution();
            ArrayList<ArrayList<Integer>> res = obj.Paths(root);
            IntMatrix.print(res);
        }
    }
}

class Solution 
{
    public static ArrayList<ArrayList<Integer>> Paths(Node root) 
    {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        helper( root , path , ans);
        return ans;
    }
    
    public static void helper( Node root , List<Integer> path , ArrayList<ArrayList<Integer>> ans )
    {
        
        if( root == null ) return;
        path.add(root.data);
        
        if( root.left == null && root.right == null ) 
        {
            ans.add( new ArrayList<>(path));
        }
        else 
        {
             helper( root.left , path , ans);
             helper( root.right , path , ans);
        }
        path.remove( path.size()-1);
    }
}
