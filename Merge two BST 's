import java.io.*;
import java.math.*;
import java.util.*;

class Node 
{
    int data;
    Node left, right;

    public Node(int d) 
    {
        data = d;
        left = right = null;
    }
}

class GFG 
{
    static Node buildTree(String str) 
    {
        if (str.length() == 0 || str.equals('N')) return null;
        String[] s = str.split(" ");

        Node root = new Node(Integer.parseInt(s[0]));
        Queue<Node> q = new LinkedList<Node>();
        q.add(root);

        int i = 1;
        while (!q.isEmpty() && i < s.length) 
        {
            Node currNode = q.remove();

            String currVal = s[i];

            if (!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                q.add(currNode.left);
            }
            i++;
            if (i >= s.length) break;
            currVal = s[i];

            if (!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                q.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static void main(String args[]) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t > 0) 
        {
            String s = br.readLine();
            Node root1 = buildTree(s);
            s = br.readLine();
            Node root2 = buildTree(s);
            Solution T = new Solution();
            List<Integer> ans = T.merge(root1, root2);
            for (int i = 0; i < ans.size(); i++) System.out.print(ans.get(i) + " ");
            System.out.println();
            t--;
        }
    }
}

class Solution 
{
    public static void helper(Node root,List<Integer>ans)
    {
        if(root == null)return ;
        helper(root.left,ans);
        ans.add(root.data);
         helper(root.right,ans);
        
    }
    public List<Integer> merge(Node root1, Node root2) 
    {
        List<Integer>a = new ArrayList<>();
        List<Integer>b = new ArrayList<>();
        List<Integer>ans = new ArrayList<>();
        
        helper(root1,a);
        helper(root2,b);
        
        int i = 0;
        int j = 0;
        
        while(i<a.size() && j<b.size())
        {
            if(a.get(i)<b.get(j))
            {
                ans.add(a.get(i));
                i++;
            }
            else
            {
                 ans.add(b.get(j));
                j++;
                
            }
        }
        while(i<a.size())
        {
            ans.add(a.get(i));
            i++;
        }
        
        while(j<b.size())
        {
             ans.add(b.get(j));
                j++;
        }
        return ans;
    }
}
