import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG 
{
    static Node buildTree(String str)
    {
        
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        
        Node root = new Node(Integer.parseInt(ip[0]));
        
        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        
        int i = 1;
        while(queue.size() > 0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;
            if(i >= ip.length)
            {
                break;
            }   
            currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    
    static void printInorder(Node root)
    {
        if(root == null)
        {
            return;
        }
        
        printInorder(root.left);
        System.out.print(root.data + " ");
        printInorder(root.right);
    }
    
    static void displayCList(Node head)
    {
        Node itr = head;
        do
        {
            System.out.print(itr.data + " ");
            itr = itr.right;
        } 
        while (head != itr);
        
        System.out.println();
    	itr = itr.left;
    	head = itr;
    	
    	do
    	{
    		System.out.print(itr.data + " ");
    		itr=itr.left;
    	}
    	while(head != itr);
    	System.out.println();
    }
	public static void main (String[] args) throws IOException 
	{
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while(t --> 0)
        {
            String s= br.readLine();
            Node root = buildTree(s);
            Solution boj = new Solution();
            Node head = boj.bTreeToClist(root);
            displayCList(head);
        }
	}
}

class Solution
{ 
    Node bTreeToClist(Node root)
    {
        Queue<Integer>q = new LinkedList<>();
        inorder(q,root);
        Node head = new Node(q.peek());

        q.remove();
        Node p = head;
        p.left = null;
        while(!q.isEmpty())
        {
            int n = q.peek();
            q.remove();
            Node newNode = new Node(n);
            p.right = newNode;
            newNode.left = p;
            p = newNode;
        }
        head.left = p;
        p.right = head;
        return head;
    }
    public static void inorder(Queue<Integer> q, Node root)
    {
        if(root == null)
        {
            return;
        }
        inorder(q,root.left);
        q.add(root.data);
        inorder(q,root.right);
    }
}
