import java.io.*;
import java.math.*;
import java.util.*;

class Node 
{
    int data;
    Node left, right;

    public Node(int d) 
    {
        data = d;
        left = right = null;
    }
}

public class GFG 
{
    static Node buildTree(String str) 
    {
        if (str.length() == 0 || str.equals('N')) return null;
        String[] s = str.split(" ");

        Node root = new Node(Integer.parseInt(s[0]));
        Queue<Node> q = new LinkedList<Node>();
        q.add(root);

        int i = 1;
        while (!q.isEmpty() && i < s.length) 
        {
            Node currNode = q.remove();
            String currVal = s[i];
            if (!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                q.add(currNode.left);
            }
            i++;
            if (i >= s.length) break;
            currVal = s[i];

            if (!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                q.add(currNode.right);
            }

            i++;
        }
        return root;
    }

    public static void main(String args[]) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while (t > 0) 
        {
            String s = br.readLine().trim();
            Node root = buildTree(s);

            String[] snums = br.readLine().split(" ");
            int k = Integer.parseInt(snums[0]);
            int x = Integer.parseInt(snums[1]);
            int y = Integer.parseInt(snums[2]);

            Solution T = new Solution();
            System.out.println(T.kthCommonAncestor(root, k, x, y));
            t--;
        }
    }
}

class Solution 
{
   public void level(Node root,int x,int y,ArrayList<Integer> a)
    {
        if(root == null)
        {
            return;
        }
        a.add(root.data);
        if(x<root.data && y<root.data)
        {
            level(root.left,x,y,a);
        }
        if(x>root.data && y>root.data)
        {
            level(root.right,x,y,a);
        }
        return;
    }
    public int kthCommonAncestor(Node root, int k, int x, int y) 
    {
        ArrayList<Integer> a=new ArrayList<Integer>();
        level(root,x,y,a);
        return(a.size()-k>=0)?a.get(a.size()-k):-1;
    }
}
