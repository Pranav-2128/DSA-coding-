import java.io.*;
import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

class Node 
{
    int data;
    Node left;
    Node right;

    Node(int data) 
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG 
{
    static Node buildTree(String str) 
    {
        if (str.length() == 0 || str.charAt(0) == 'N') 
        {
            return null;
        }
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();

        queue.add(root);

        int i = 1;
        while (queue.size() > 0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if (!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if (i >= ip.length) break;

            currVal = ip[i];

            if (!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while (t > 0) 
        {
            String s = br.readLine();
            Node root = buildTree(s);
            Solution g = new Solution();
            System.out.println(g.isSumTree(root));
            t--;
        }
    }
}

class Solution 
{
    boolean isSumTree(Node root) 
    {
        if((sumTree(root.left)+sumTree(root.right)) == root.data) return true;
        return false;
    }
    public static int sumTree(Node root)
    {
        if(root == null) 
        {
            return 0;
        }
        if(root.left == null && root.right == null) 
        {
            return root.data;
        }
        int left = sumTree(root.left);
        int right = sumTree(root.right);
        
        if(left + right != root.data) 
        {
            return -999;
        }
        return root.data+left+right;
    }
}
