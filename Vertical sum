import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left=null;
        right=null;
    }
}

class GfG 
{
    static Node buildTree(String str)
    {
        if(str.length()==0 || str.charAt(0)=='N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));

        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                    
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    
	public static void main (String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());
        while(t > 0)
        {
            String s = br.readLine();
	    	Node root = buildTree(s);
    	    Solution g = new Solution();
		
		    ArrayList <Integer> res = g.verticalSum(root);
		    for (Integer num : res) System.out.print (num + " ");
		    System.out.println();
            t--;
        }
    }
}

class Solution
{
    public ArrayList <Integer> verticalSum(Node root) 
    {
        ArrayList<Integer> result = new ArrayList<>();
        if (root == null) 
        {
            return result;
        }
        
        TreeMap<Integer, Integer> verticalSumMap = new TreeMap<>();
        verticalSumUtil(root, 0, verticalSumMap);
        for (Map.Entry<Integer, Integer> entry : verticalSumMap.entrySet()) 
        {
            result.add(entry.getValue());
        }
        return result;
    }
    
    private void verticalSumUtil(Node root, int verticalLine, TreeMap<Integer, Integer> verticalSumMap) 
    {
        if (root == null) 
        {
            return;
        }
        verticalSumMap.put(verticalLine, verticalSumMap.getOrDefault(verticalLine, 0) + root.data);
        verticalSumUtil(root.left, verticalLine - 1, verticalSumMap);
        verticalSumUtil(root.right, verticalLine + 1, verticalSumMap);
    }
}
