import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG 
{
    static Node buildTree(String str)
    {
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>(); 
        queue.add(root);
        
        int i = 1;
        while(queue.size()>0 && i < ip.length) 
        {    
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            i++;
            if(i >= ip.length)
                break;
    
            currVal = ip[i];                
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    static void printInorder(Node root)
    {
        if(root == null)
            return;
            
        printInorder(root.left);
        System.out.print(root.data+" ");
        
        printInorder(root.right);
    }
    
	public static void main (String[] args) throws IOException
	{
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(br.readLine());
        while(t > 0)
        {
            String s = br.readLine();
	    	Node root = buildTree(s);
    	    Tree g = new Tree();
			ArrayList<Integer> result = g.leftView(root);
			for(int value : result)
			{
			    System.out.print(value + " ");
			}
			System.out.println();
            t--;
        }
    }
}

class Tree
{
    ArrayList<Integer> leftView(Node root)
    {
        ArrayList<Integer> arr = new ArrayList<>();
     
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty())
        {
            int size = q.size();
            for(int i = 0 ; i < size ; i++)
            {
                Node temp = q.poll();
                if(i ==0)arr.add(temp.data);
                if(temp.left != null)
                {
                    q.add(temp.left);
                }
                if(temp.right != null)
                {
                    q.add(temp.right);
                }
            }
        }
        return arr;
    }
}
