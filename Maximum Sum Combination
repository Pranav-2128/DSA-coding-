import java.util.*;
import java.lang.*;
import java.math.*;
import java.io.*;

class GFG 
{
    public static void main(String[] args) throws IOException 
    {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) 
        {
            int n = sc.nextInt();
            int k = sc.nextInt();
            int a[] = new int[n];
            for (int i = 0; i < n; i++) 
            {
                a[i] = sc.nextInt();
            }
            
            int b[] = new int[n];
            for (int i = 0; i < n; i++) 
            {
                b[i] = sc.nextInt();
            }

            Solution obj = new Solution();
            List<Integer> ans = obj.maxCombinations(n, k, a, b);
            for (int e : ans) System.out.print(e + " ");
            System.out.println();
        }
    }
}
class Solution 
{
    static List<Integer> maxCombinations(int N, int K, int A[], int B[]) 
    {
        List<Integer> list = new ArrayList<>(); 
        ArrayList<Integer> temp = new ArrayList<>(); 
        
        for(int i = 0; i < A.length; i++)
        {
            for(int j = 0; j < B.length; j++)
            {
                temp.add(A[i] + B[j]);
            }
        } 
        
        Collections.sort(temp);
        int j = temp.size() - 1; 
        
        while(K-->0)
        {
            list.add(temp.get(j)); 
            j--;
        } 
        return list;
    }
}
