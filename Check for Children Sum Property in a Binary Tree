import java.util.LinkedList; 
import java.util.Queue; 
import java.io.*;
import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}


class GfG 
{
    static Node buildTree(String str)
    {
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        
        Queue<Node> queue = new LinkedList<>(); 
        queue.add(root);
        
        int i = 1;
        while(queue.size() > 0 && i < ip.length) 
        {    
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
            
            i++;
            if(i >= ip.length)
            {
                break;
            }    
            currVal = ip[i];
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        
        return root;
    }
    
    void inOrder(Node node) 
    {
        if (node == null) 
        {
            return;
        }

        inOrder(node.left);
        System.out.print(node.data + " ");
        inOrder(node.right);
    }
    
	public static void main (String[] args) throws IOException
	{
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	    int t = Integer.parseInt(br.readLine());
        while(t-- > 0)
        {
            String s = br.readLine();
	    	Node root = buildTree(s);
		    Solution g=new Solution();
            System.out.println(g.isSumProperty(root));
        }
	}
}

class Solution
{
    public static int isSumProperty(Node root)
    {
        if(root == null)
        {
            return 1;
        }
        if(root.left == null && root.right == null)
        {
            return 1;
        }
        int left = (root.left!=null)?root.left.data:0;
        int right = (root.right!=null)?root.right.data:0;
        if(left+right != root.data)
        {
            return 0;
        }
        return (isSumProperty(root.left) == 1 && isSumProperty(root.right) == 1)?1:0;
    }
}
