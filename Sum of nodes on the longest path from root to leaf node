import java.io.*;
import java.util.*;
import java.lang.*; 


class Node 
{
    int data;
    Node left, right;
    
    public Node(int data)
    {
        this.data = data;
    }
}

class GFG {
    
    
    static Node buildTree(String str)
    {
        if(str.length()==0 || str.charAt(0)=='N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));

        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);

        int i = 1;
        while(queue.size()>0 && i < ip.length)
        {
            
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    public static void inorder(Node root)
    {
        if(root == null)
        {
            return;
        }
        
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    
	public static void main (String[] args) throws IOException 
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t=Integer.parseInt(br.readLine());
		while(t-- > 0)
		{
		    String s = br.readLine();
	    	Node root = buildTree(s);
		    Solution obj = new Solution();
		    int res = obj.sumOfLongRootToLeafPath(root);
		    System.out.println(res);
		}
	}
}

class Solution 
{
    int maxH, res;
    void solve(Node root, int ht, int sum) 
    {
        if(root == null)
        {
            return;
        }
        
        if(root.left == null && root.right == null) 
        {
            sum += root.data;
            
            if(ht > maxH) 
            {
                maxH = ht;
                res = sum;
            } 
            else if(ht == maxH) 
            {
                res = Math.max(res, sum);
            }
            return;
        }
        
        sum += root.data;
        solve(root.left, ht + 1, sum);
        solve(root.right, ht + 1, sum);
    }
    
    int sumOfLongRootToLeafPath(Node root) 
    {
        maxH = res = 0;
        solve(root, 0, 0);
        return res;
    }
}
