import java.io.*;
import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

class Node 
{
    int data;
    Node left;
    Node right;

    Node(int data) 
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class GfG 
{
    static Node buildTree(String str) 
    {
        if (str.length() == 0 || str.charAt(0) == 'N') 
        {
            return null;
        }
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));
        Queue<Node> queue = new LinkedList<>();

        queue.add(root);

        int i = 1;
        while (queue.size() > 0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();

            String currVal = ip[i];

            if (!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }

            i++;
            if (i >= ip.length) break;
            currVal = ip[i];
            if (!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }

    static void deletetree(Node root) 
    {
        if (root == null) return;
        deletetree(root.left);
        deletetree(root.right);
        root.left = null;
        root.right = null;
    }

    static void printInorder(Node root) 
    {
        if (root == null) return;
        printInorder(root.left);
        System.out.print(root.data + " ");
        printInorder(root.right);
    }

    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(br.readLine());
        while (t-- > 0) 
        {
            String s = br.readLine();
            Node root = buildTree(s);
            Tree tr = new Tree();
            ArrayList<Integer> A = tr.serialize(root);
            deletetree(root);
            root = null;
            Node getRoot = tr.deSerialize(A);
            printInorder(getRoot);
            System.out.println();
        }
    }
}

class Tree 
{
    public ArrayList<Integer> serialize(Node root) 
    {
        ArrayList<Integer> arr = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();    
        q.add(root);

        while(!q.isEmpty())
        {
            Node curr = q.remove();
            
            if(curr==null)
            {
                arr.add(-1);
                continue;
            }
            arr.add(curr.data);
            q.add(curr.left);
            q.add(curr.right);
        }
        return arr;
    }
    
    public Node deSerialize(ArrayList<Integer> A) 
    {
        Queue<Node> q = new LinkedList<>();
        
        Node root = new Node(A.get(0));
        q.add(root);
        int idx = 1;
        while(!q.isEmpty())
        {
            Node curr = q.poll();
           
            if(A.get(idx) != -1)
            {
               curr.left = new Node(A.get(idx));
               q.add(curr.left);
            }
            else
            {
               curr.left=null;
            }
           
            idx++;
            if(A.get(idx) != -1)
            {
                curr.right = new Node(A.get(idx));
                q.add(curr.right);
            }
            else
            {
               curr.right = null;
            }
            idx++; 
        }
        return root;
    }
};
