import java.io.*;
import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    Node(int data)
    {
        this.data = data;
        left = null;
        right = null;
    }
}

class GFG
{
    static Node buildTree(String str)
    {
        if(str.length() == 0 || str.equals('N'))
        return null;
        String[] s = str.split(" ");
        
        Node root = new Node(Integer.parseInt(s[0]));
        Queue <Node> q = new LinkedList<Node>();
        q.add(root);
        
        int i = 1;
        while(!q.isEmpty() && i < s.length)
        {
            Node currNode = q.remove();
            String currVal = s[i];
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                
                q.add(currNode.left);
            }
            i++;
            if(i >= s.length)
            {
                break;
            }
            currVal = s[i];
            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                q.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    
    public static void main(String args[]) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t>0)
        {
            String s = br.readLine();
            Node root = buildTree(s);
            int k = Integer.parseInt(br.readLine().trim());
            Solution ob = new Solution();
            
            System.out.println(ob.sumK(root,k));
            t--;
        }
    }
}

class Solution
{
    int count = 0;
    void helper(Node root,int k,ArrayList<Integer> path)
    {
        if(root == null)
        {
            return;
        }
        path.add(root.data);
        int size = path.size();
        int sum = 0;
        for(int i = size-1; i >= 0; i--)
        {
            sum += path.get(i);
            if(sum == k)
            {
                count++;
            }
        }
        helper(root.left,k,path);
        helper(root.right,k,path);
        path.remove(path.size()-1);
    }
    
    public int sumK(Node root,int k)
    {
        ArrayList<Integer> path = new ArrayList<>();
        helper(root , k, path);
        return count;
    }
}
