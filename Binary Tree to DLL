import java.util.Scanner;
import java.util.*;
import java.io.*;
import java.lang.*;

class Node
{
	Node left, right;
	int data;
	
	Node(int d)
	{
		data = d;
		left = right = null;
	}
	
}

class BT_To_DLL
{
    
    static Node buildTree(String str)throws IOException
    {
        if(str.length() == 0 || str.charAt(0) == 'N')
        {
            return null;
        }
        
        String ip[] = str.split(" ");
        Node root = new Node(Integer.parseInt(ip[0]));

        Queue<Node> queue = new LinkedList<>(); 
        
        queue.add(root);
        int i = 1;
        while(queue.size()>0 && i < ip.length) 
        {
            Node currNode = queue.peek();
            queue.remove();
            String currVal = ip[i];
                
            if(!currVal.equals("N")) 
            {
                currNode.left = new Node(Integer.parseInt(currVal));
                queue.add(currNode.left);
            }
                
            i++;
            if(i >= ip.length)
                break;
                
            currVal = ip[i];

            if(!currVal.equals("N")) 
            {
                currNode.right = new Node(Integer.parseInt(currVal));
                queue.add(currNode.right);
            }
            i++;
        }
        return root;
    }
    
	void inorder(Node node)
	{
		if(node == null)
			return ;
		else
			inorder(node.left);
			System.out.print(node.data + " ");
			inorder(node.right);
	}
	public static void printList(Node head) 
    {
		Node prev = head;
        while (head != null) 
        {
            System.out.print(head.data + " ");
			prev = head;
            head = head.right;
        }
		
		System.out.println();
		while(prev != null)
		{
			System.out.print(prev.data+" ");
			prev = prev.left;
		}
    }
	public static void main(String args[])  throws IOException
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while(t > 0)
		{
            String s = br.readLine();
            Node root = buildTree(s);
            Solution g = new Solution();
            
            Node ans = g.bToDLL(root);
            printList(ans);
            t--;
            System.out.println();
		}
	}
}

class Solution 
{
    Node prev = null;
    Node bToDLL(Node root) 
    {
        if (root == null) return null;
        Node head = bToDLLUtil(root);
        return head;
    }
    Node bToDLLUtil(Node root) 
    {
        if (root == null) return null;
        Node head = bToDLLUtil(root.left);
        if (prev == null) 
        {
            head = root;
        } 
        else 
        {
            root.left = prev;
            prev.right = root;
        }
        prev = root;
        bToDLLUtil(root.right);
        return head;
    }
}
